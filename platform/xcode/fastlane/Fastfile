default_platform(:ios)

DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]
PROJECT_BUILD_NUMBER = ENV["PROJECT_BUILD_NUMBER"]
PILOT_CHANGE_LOG = ENV["PILOT_CHANGE_LOG"]

def delete_temp_keychain()
  delete_keychain(
    name: TEMP_KEYCHAIN_USER
  ) if File.exist? File.expand_path("~/Library/Keychains/#{TEMP_KEYCHAIN_USER}-db")
end


def init_credentials()
  create_keychain(
    name: TEMP_KEYCHAIN_USER,
    password: TEMP_KEYCHAIN_PASSWORD,
    unlock: false,
    timeout: 0
  )

  return app_store_connect_api_key(
    key_id: APPLE_KEY_ID,
    issuer_id: APPLE_ISSUER_ID,
    key_content: APPLE_KEY_CONTENT,            
    duration: 1200,            
    in_house: false
  )
end

def fastlane_match(profile_type, api_key)
  match(
    type: profile_type,
    app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
    git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
    readonly: true,
    keychain_name: TEMP_KEYCHAIN_USER,
    keychain_password: TEMP_KEYCHAIN_PASSWORD,
    api_key: api_key
  )
end

def build_target(custom_configuration, custom_scheme, custom_method)
  puts "New build number is: #{PROJECT_BUILD_NUMBER}"
    
  increment_build_number_in_xcodeproj(
    xcodeproj: "Techmino.xcodeproj" ,
    scheme: custom_scheme,
    build_number: "#{PROJECT_BUILD_NUMBER}"
  )

  package_name = "#{custom_scheme}_#{custom_configuration}_#{custom_method}.ipa"

  gym(
    project: "Techmino.xcodeproj",
    configuration: custom_configuration,
    scheme: custom_scheme,
    export_method: custom_method,
    export_options: {
      provisioningProfiles: { 
          DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER
      }
    },
    output_name: package_name
  )
  
  return package_name
end

def upload_package(package_name, is_release)
  if is_release
    deliver(
      apple_id: "#{DEVELOPER_APP_ID}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      skip_screenshots: true,
      reject_if_possible: true,
      automatic_release: true,
      ipa: package_name
    )
  else
    pilot(
      apple_id: "#{DEVELOPER_APP_ID}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      distribute_external: true,
      expire_previous_builds: true,
      changelog: "#{PILOT_CHANGE_LOG}",
      groups: "Techmino",
      ipa: package_name
    )
  end
end

platform :ios do
  lane :release do
    api_key = init_credentials()

    fastlane_match("appstore", api_key)
    dist_package = build_target("Distribution", "Techmino", "app-store")
    upload_package(dist_package, true)

    delete_temp_keychain()
  end

  lane :dev do
    api_key = init_credentials()

    # fastlane_match('adhoc', api_key)
    # dev_package = build_target("Release", "Techmino Dev", "ad-hoc")

    fastlane_match('appstore', api_key)
    dist_package = build_target("Distribution", "Techmino Dev", "app-store")
    upload_package(dist_package, false)

    delete_temp_keychain()
  end
end