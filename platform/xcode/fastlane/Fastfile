require 'discordrb/webhooks'

default_platform(:ios)

ACTION_ID = ENV['ACTION_ID']
API_ID = ENV["API_ID"]
API_ISSUER = ENV["API_ISSUER"]
API_KEY = ENV["API_KEY"]
APP_BUILD = ENV["APP_BUILD"]
APP_CHANGELOG = ENV["APP_CHANGELOG"]
APP_ID = ENV["APP_ID"]
APP_IDENTIFIER = ENV["APP_IDENTIFIER"]
APP_PROFILE = ENV["APP_PROFILE"]
APP_VERSION = ENV["APP_VERSION"]
DISCORD_WEBHOOK = ENV["DISCORD_WEBHOOK"]
KEYCHAIN_NAME = ENV["KEYCHAIN_NAME"]
KEYCHAIN_PWD = ENV["KEYCHAIN_PWD"]
MATCH_TOKEN = ENV["MATCH_TOKEN"]

def delete_temp_keychain()
  delete_keychain(
    name: KEYCHAIN_NAME
  ) if File.exist? File.expand_path("~/Library/Keychains/#{KEYCHAIN_NAME}-db")
end


def init_credentials()
  create_keychain(
    name: KEYCHAIN_NAME,
    password: KEYCHAIN_PWD,
    unlock: false,
    default_keychain: true,
    timeout: 0
  )

  return app_store_connect_api_key(
    key_id: API_ID,
    issuer_id: API_ISSUER,
    key_content: API_KEY,            
    duration: 1200,            
    in_house: false
  )
end

def fastlane_match(profile_type, api_key)
  match(
    type: profile_type,
    app_identifier: "#{APP_IDENTIFIER}",
    git_basic_authorization: Base64.strict_encode64(MATCH_TOKEN),
    readonly: true,
    keychain_name: KEYCHAIN_NAME,
    keychain_password: KEYCHAIN_PWD,
    api_key: api_key
  )
end

def notityDiscord(
  buildType,
  title,
  description,
  color
)
  puts "Try sending Discord message..."
  client = Discordrb::Webhooks::Client.new(url: DISCORD_WEBHOOK)
  client.execute do |builder|
    builder.add_embed do |embed|
      embed.title = title
      embed.description = "```#{description}```"
      embed.url = "https://github.com/26F-Studio/Techmino/actions/runs/#{ACTION_ID}"
      embed.color = color
      embed.timestamp = Time.now
      embed.footer = Discordrb::Webhooks::EmbedFooter.new(text: "Github Actions", icon_url: "https://avatars.githubusercontent.com/u/44036562?s=200&v=4")
      embed.thumbnail = Discordrb::Webhooks::EmbedThumbnail.new(url: "https://blog.frankel.ch/assets/resources/github-actions-maven-releases/git-hub-actions.svg")
      embed.author = Discordrb::Webhooks::EmbedAuthor.new(name: "Techmino **#{buildType}** CI Notification üîî", icon_url: "https://raw.githubusercontent.com/26F-Studio/Techmino/main/.github/build/Windows/icon.ico")
      embed.fields = [
        {name: "Changelog", value: APP_CHANGELOG},
        {name: "Version", value: APP_VERSION[1..]},
        {name: "Build number", value: APP_BUILD}
      ]
    end
  end
end

def build_target(custom_configuration, custom_scheme, custom_method, default_package_name)
  puts "New version is: #{APP_VERSION[1..]}"
  puts "New build number is: #{APP_BUILD}"
  puts "Changelog is: #{APP_CHANGELOG}"

  increment_version_number_in_xcodeproj(
    xcodeproj: "Techmino.xcodeproj" ,
    scheme: custom_scheme,
    version_number: "#{APP_VERSION[1..]}"
  )
    
  increment_build_number_in_xcodeproj(
    xcodeproj: "Techmino.xcodeproj" ,
    scheme: custom_scheme,
    build_number: "#{APP_BUILD}"
  )

  if default_package_name
    package_name = "Techmino.ipa"
  else
    package_name = "#{custom_scheme}_#{custom_configuration}_#{custom_method}.ipa"
  end

  gym(
    silent: true,
    project: "Techmino.xcodeproj",
    configuration: custom_configuration,
    scheme: custom_scheme,
    export_method: custom_method,
    export_options: {
      provisioningProfiles: { 
          APP_ID => APP_PROFILE
      }
    },
    output_name: package_name
  )
  
  return package_name
end

def pilot_package(package_name)
  begin
    pilot(
      apple_id: "#{APP_ID}",
      app_identifier: "#{APP_IDENTIFIER}",
      changelog: "#{APP_CHANGELOG}",
      skip_waiting_for_build_processing: true,
      groups: "Dev",
      ipa: package_name
    )
  rescue StandardError => e
    UI.important(e.message + ' ‚ö†Ô∏è')
    notityDiscord('Develop', 'Upload to Test Flight internal test failed', e.message, 13632027)
  end
end

def distribute_package(package_name)
  begin
    pilot(
      apple_id: "#{APP_ID}",
      app_identifier: "#{APP_IDENTIFIER}",
      changelog: "#{APP_CHANGELOG}",
      distribute_external: true,
      groups: ["Dev", "Test"],
      ipa: package_name
    )
  rescue StandardError => e
    UI.important(e.message + ' ‚ö†Ô∏è')
    notityDiscord('Test', 'Upload to Test Flight external test failed', e.message, 13632027)
  end
end

def deliver_package(package_name)
  begin
    deliver(
      app_identifier: "#{APP_IDENTIFIER}",
      force: true,
      precheck_include_in_app_purchases: false,
      skip_screenshots: true,
      submit_for_review: true,
      reject_if_possible: true,
      automatic_release: true,
      ipa: package_name,
      submission_information: {
        add_id_info_uses_idfa: false
      }
    )
  rescue StandardError => e
    UI.important(e.message + ' ‚ö†Ô∏è')
    notityDiscord('Release', 'Upload to App Store failed', e.message, 13632027)
  end
end

platform :ios do
  lane :dev do
    api_key = init_credentials()

    fastlane_match('development', api_key)
    build_target("Debug", "Techmino Dev", "development", true)

    fastlane_match('appstore', api_key)
    dist_package = build_target("Distribution", "Techmino Dev", "app-store", false)
    pilot_package(dist_package)

    delete_temp_keychain()
  end

  lane :test do
    api_key = init_credentials()

    fastlane_match('development', api_key)
    build_target("Debug", "Techmino Dev", "development", true)

    fastlane_match('appstore', api_key)
    dist_package = build_target("Distribution", "Techmino Dev", "app-store", false)
    distribute_package(dist_package)

    delete_temp_keychain()
  end

  lane :release do
    api_key = init_credentials()

    fastlane_match('development', api_key)
    build_target("Debug", "Techmino", "development", true)

    fastlane_match("appstore", api_key)
    dist_package = build_target("Distribution", "Techmino", "app-store", false)
    deliver_package(dist_package)

    delete_temp_keychain()
  end
end